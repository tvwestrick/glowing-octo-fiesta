First:
	Each node has a NEW DATA MEMBER string corresponding to what part of the equation it has left
	(called std::string plaintext)



Have list of unary and binary operators

Find first operator


If binary -> do this tree structure

	 Operator
 	  /  \
	 LHS RHS

	The Operator Node has plaintext corresponding to the symbol used for the operator ("+", "-", etc..)
	The LHS below it has plaintext corresponding to the text left of the operator
	The RHS below it has plaintext corresponding to the text right of the operator

	ex: 5 + cos(7x + 6)

	 plaintext: (+)
	     /     \
	    /       \
  plaintext: 5      plaintext: cos(7x + 6)



If unary -> do this tree structure

	  Operator
	    |
	  Inside

	The Operator Node has plaintext corresponding to the symbol used for the operator ("+", "-", etc..)
	The Node below it has plaintext corresponding to the text inside the parentheses of the operator

	ex: cos(x^2)

  	  plaintext: cos
  	       |
 	  plaintext: x^2


These steps would be done tree recursively as shown in example below (only plaintext is shown)


input: 5 + cos(7*x^2)



First operator is (+) so we start there


	(+)
       /   \
      5   cos(7*x^2)		(+) is Operator, 5 is LHS, cos(7*x^2) is RHS

	(+)
       /  \
      5   cos
            \			cos is Operator, 7*x^2 is inside
	    7*x^2

	(+)
       /  \
      5   cos
            \
	    (*)			* is Operator, 7 is LHS, x^2 is RHS
	    / \
	   7   x^2

	(+)
       /  \
      5    cos
             \
	     (*)
             / \
	    7  pow		pow is Operator, x is LHS, 2 is RHS
               / \
	      x  2

There still needs to be a way to account for parentheses though, so that could be added to the algorithm





